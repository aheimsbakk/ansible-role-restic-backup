# vim: ai et ts=2 st=2 sw=2 :
---

# Install software

- name: install restic and rclone
  ansible.builtin.include: software.yml

## Modify variables

- name: multiple repositories
  ansible.builtin.set_fact:
    backup_destination_path: '{{ restic_backup_destination_path }}/{{ inventory_hostname }}'
    cacheable: false
  when: restic_backup_destination_multiple|bool

- name: single repository
  ansible.builtin.set_fact:
    backup_destination_path: '{{ restic_backup_destination_path }}'
    cacheable: false
  when: not restic_backup_destination_multiple|bool

## Destination server

- name: destination - create destination user
  ansible.builtin.user:
    name: '{{ restic_backup_destination_user }}'
    shell: /bin/bash
  run_once: true
  delegate_to: '{{ restic_backup_destination_server }}'

- name: destination - create .ssh folder for restic_user
  ansible.builtin.file:
    path: '/home/{{ restic_backup_destination_user }}/.ssh'
    state: directory
    owner: '{{ restic_backup_destination_user }}'
    mode: '0700'
  run_once: true
  delegate_to: '{{ restic_backup_destination_server }}'

- name: destination - create rclone config folder
  ansible.builtin.file:
    path: '/home/{{ restic_backup_destination_user }}/{{ item }}'
    state: directory
    owner: '{{ restic_backup_destination_user }}'
    mode: '0700'
  run_once: true
  delegate_to: '{{ restic_backup_destination_server }}'
  loop:
    - .config
    - .config/rclone

- name: destination - create rclone configuration
  ansible.builtin.copy:
    dest: '/home/{{ restic_backup_destination_user }}/.config/rclone/rclone.conf'
    owner: '{{ restic_backup_destination_user }}'
    mode: '0600'
    content: "{{ restic_backup_destination_rclone_conf }}"
  run_once: true
  delegate_to: '{{ restic_backup_destination_server }}'

## Clients configuration

#- name: install rclone and restic
#  ansible.builtin.package:
#    name:
#      - rclone
#      - restic

- name: store restic password to /var/lib/misc
  ansible.builtin.copy:
    dest: /var/lib/misc/restic-service-passwd
    owner: "{{ restic_backup_destination_user if inventory_hostname == restic_backup_destination_server else 'root' }}"
    mode: 0400
    content: '{{ restic_backup_source_password }}'
  no_log: true

- name: init repo if it does not exists
  ansible.builtin.command:
    argv:
      - restic
      - -r
      - '{{ backup_destination_path }}'
      - init
    creates: '{{ backup_destination_path }}/config'
  environment:
    RESTIC_PASSWORD_FILE: /var/lib/misc/restic-service-passwd
  # Do not run once, in case we have one folder for each host
  # run_once: true
  delegate_to: '{{ restic_backup_destination_server }}'
  #become_user: '{{ restic_backup_destination_user }}'
  register: init_repo

- name: change ownership of repository
  ansible.builtin.file:
    dest: '{{ backup_destination_path }}'
    owner: '{{ restic_backup_destination_user }}'
    mode: 0700
    recurse: true
  when: init_repo is changed

- name: create ssh-key for the root user if it's missing
  ansible.builtin.user:
    name: root
    generate_ssh_key: true
    ssh_key_type: ed25519
    ssh_key_file: '.ssh/id_ed25519_{{ restic_backup_destination_user }}'
    ssh_key_comment: 'Ansible managed {{ now(fmt="%y-%m-%d") }}'
    force: false

- name: check if key exists
  ansible.builtin.stat:
    path: '.ssh/id_ed25519_{{ restic_backup_destination_user }}'
  register: ssh_pub_key_file

- name: read public key into variable
  ansible.builtin.slurp:
    src: '/root/.ssh/id_ed25519_{{ restic_backup_destination_user }}.pub'
  register: ssh_pub_key_blob
  when: ssh_pub_key_file.stat.exists|bool

- name: write public key to restic_destination
  ansible.posix.authorized_key:
    user: '{{ restic_backup_destination_user }}'
    key: '{{ ssh_pub_key_blob.content | b64decode }}'
    comment: '{{ inventory_hostname }}'
    key_options: 'restrict,command="rclone serve restic --stdio --append-only --transfers 2 {{ restic_backup_destination_rclone_remote }}:{{ backup_destination_path }}"'
  delegate_to: '{{ restic_backup_destination_server }}'
  throttle: 1
  when: ssh_pub_key_blob.content is defined

# TODO: should not use default_ipv4_address in known_hosts?
- name: add restic_destination to known_hosts
  ansible.builtin.known_hosts:
    name: '{{ restic_backup_destination_address | default(hostvars[restic_backup_destination_server].ansible_facts.fqdn) }}'
    key: '{{ restic_backup_destination_address | default(hostvars[restic_backup_destination_server].ansible_facts.fqdn) }} {{ hostvars[restic_backup_destination_server].ansible_facts.ssh_host_key_ed25519_public_keytype }} {{ hostvars[restic_backup_destination_server].ansible_facts.ssh_host_key_ed25519_public }}'
    path: /root/.ssh/known_hosts

- name: add systemd service for running rclone
  ansible.builtin.template:
    dest: /etc/systemd/system/restic.service
    src: restic.service
    mode: 0644

- name: add systemd timer for running restic
  ansible.builtin.template:
    dest: /etc/systemd/system/restic.timer
    src: restic.timer
    mode: 0644

- name: check if restic.timer exists
  ansible.builtin.stat:
    path: /etc/systemd/system/restic.timer
  register: systemd_restic_timer

- name: enable the systemd timer of restic
  ansible.builtin.systemd:
    name: restic.timer
    daemon_reload: true
    state: started
    enabled: true
  when: systemd_restic_timer.stat.exists|bool
